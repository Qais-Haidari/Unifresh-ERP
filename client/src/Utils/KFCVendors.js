import axios from "axios";

export const KFC_YUM = async (start, end) => {
  let lineamount = 0;
	let linegstamount = 0;
	let totallinespayable = 0;
	let totalinvpayable = 0;
	let totalinvoices = 0;
	let totallines = 0;
  let freightsign = ''
  let poststring1
  let data = [];
    axios
    .get(`http://localhost:5000/Report/KFC/YUM/${start}/${end}`)
    .then(async (res) => {
      let masterline
      for (let index = 0; index < res.data.length; index++) {
          const element = res.data[index];
          let totalinvpayable;
          let text =
          element.HEADERNUMBER + element.INVOICENUMBER + element.STORENUMBER + element.INVOICEDATE + 
          element.INVOICETOTAL +  element.INVOICETOTALSIGN +  element.INVOICETAX +  element.INVOICETAXSIGN + 
          element.INVOICEPAYABLE + element.INVOICEPAYABLESIGN + element.DESCRIPTION + element.INVOICEORCREDIT + 
          element.ORIGINVPAYABLETOTAL + element.ORIGINVPAYABLESIGN + element.CORRECTEDPRICE + 
          element.CORRECTEDPRICESIGN + element.PRICEDIFFERENCETOTAL + element.PRICEDIFFERENCETOTALSIGN + 
          element.TAXDIFFERENCETOTAL + element.TAXDIFFERENCETOTALSIGN
          masterline += text
          if (element.INVOICEPAYABLESIGN === '+')
          {
              totalinvpayable += element.INVOICEPAYABLE;
          }
          else if (element.INVOICEPAYABLESIGN === '-')
          {
              totalinvpayable -= element.INVOICEPAYABLE;
          }
          
          for (let index = 0; index < res.data.length; index++) {
            const element = res.data[index];
            data[index] = await axios.get(`http://localhost:5000/Ostendo/Script/data/return/
            select
            '2' as "ID",
            '${element.INVOICENUMBER}' as "INVOICENUMBER",
            LPAD('0',8,'0') as "ORDERNUM",
            LPAD('0',8,'0') as "PONUM",
            RPAD(replace(replace(salesinvoicelines.linecode,'IN',''),'DELIVERY FEE','KFCOTHER'),15,' ') as "ITEMCODE", 
            RPAD(SALESINVOICELINES.LINEDESCRIPTION,30,' ')as "ITEMDESCRIPTION",
            LPAD(REPLACE(REPLACE(CAST(CAST(SALESINVOICELINES.INVOICEQTY AS INTEGER) AS VARCHAR(5)),'.',''),'-',''),5,'0') as "QTY", 
            CASE WHEN SALESINVOICELINES.INVOICEQTY >= 0 THEN '+' ELSE '-' END as "QTYSIGN", 
            'EA' as "UNIT",
            LPAD(REPLACE(REPLACE(CAST(CAST(SALESINVOICELINES.INVOICEUNITPRICE AS DECIMAL(18,2)) AS VARCHAR(15)),'.',''),'-',''),15,'0') as "UNITPRICE",
            LPAD(REPLACE(REPLACE(CAST(CAST(SALESINVOICELINES.EXTENDEDNETTPRICE AS DECIMAL(18,2)) AS VARCHAR(15)),'.',''),'-',''),15,'0') as "LINEAMOUNT",
            CASE WHEN SALESINVOICELINES.EXTENDEDNETTPRICE >= 0 THEN '+' ELSE '-' END as "LINEAMOUNTSIGN",
            LPAD(REPLACE(REPLACE(CAST(CAST(SALESINVOICELINES.EXTENDEDTAX AS DECIMAL(18,2)) AS VARCHAR(15)),'.',''),'-',''),15,'0') as "LINEGST",
            CASE WHEN SALESINVOICELINES.EXTENDEDTAX >= 0 THEN '+' ELSE '-' END as "LINEGSTSIGN",
            LPAD(REPLACE(REPLACE(CAST(CAST(SALESINVOICELINES.EXTENDEDTOTALPRICE AS DECIMAL(18,2)) AS VARCHAR(15)),'.',''),'-',''),15,'0') as "LINEPAYABLE",
            CASE WHEN SALESINVOICELINES.EXTENDEDTOTALPRICE >= 0 THEN '+' ELSE '-' END as "LINEPAYABLESIGN",
            LPAD(' ',30,' ') as "NOTES",
            RPAD('000000000000000000000-000000000000000-000000000000000-000000000000000-',208,' ')  as "EXTRAS" 
            from 
            SALESINVOICELINES 
            where 
            SALESINVOICELINES.INVOICENUMBER = '${element.ACTUALINVOICENUMBER}'`)

            let insertfreight = 0; 
        for (let index2 = 0; index2 < data.length; index2++) {
          const element1 = data[index2];
          if (element1.FREIGHTTOTALAMOUNT !== 0 && insertfreight == 0) {
            insertfreight = 1;
            totallines++;
            if (element1.FREIGHTTOTALAMOUNT > 0) {
              lineamount += element1.CONVERTEDFREIGHTNETT;
              linegstamount += element1.CONVERTEDFREIGHTTAX;
              totallinespayable += element1.CONVERTEDFREIGHT;
              freightsign = "+";
            }else if(element1.FREIGHTTOTALAMOUNT < 0){
              lineamount -= element1.CONVERTEDFREIGHTNETT;
              linegstamount -= element1.CONVERTEDFREIGHTTAX;
              totallinespayable -= element1.CONVERTEDFREIGHT;
              freightsign = "-";
            }
            poststring1 = 
            element1.ID + 
            element1.INVOICENUMBER + 
            element1.ORDERNUM +
            element1.PONUM +
            "KFCOTHER       " + 
            "FREIGHT CHARGE                " + 
            "00001" +
            freightsign + 
            "EA" +
            element.CONVERTEDFREIGHT + 
            element.CONVERTEDFREIGHT +
            freightsign + 
            "000000000000000" +
            "-" +
            element.CONVERTEDFREIGHT + 
            freightsign +
            element1.NOTES + 
            element1.EXTRAS + 
            "\r\n";
          }
        }
      }
    }
    // console.log(poststring1)
    console.log
    })
    .catch((err) => (document.body.innerHTML = err));
};